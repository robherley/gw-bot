// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package sqlgen

import (
	"context"
	"strings"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (id, subscription_id, goodwill_id, created_at, started_at, ends_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?, ?)
RETURNING id, subscription_id, goodwill_id, created_at, started_at, ends_at, sent_final
`

type CreateItemParams struct {
	ID             string
	SubscriptionID string
	GoodwillID     int64
	StartedAt      time.Time
	EndsAt         time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.SubscriptionID,
		arg.GoodwillID,
		arg.StartedAt,
		arg.EndsAt,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.GoodwillID,
		&i.CreatedAt,
		&i.StartedAt,
		&i.EndsAt,
		&i.SentFinal,
	)
	return i, err
}

const deleteExpiredItems = `-- name: DeleteExpiredItems :one
DELETE FROM items
WHERE ends_at < datetime('now', '-1 day')
LIMIT 1000
RETURNING COUNT(*)
`

func (q *Queries) DeleteExpiredItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteExpiredItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findItemInSubscription = `-- name: FindItemInSubscription :one
SELECT id, subscription_id, goodwill_id, created_at, started_at, ends_at, sent_final FROM items
WHERE subscription_id = ? AND goodwill_id = ?
`

type FindItemInSubscriptionParams struct {
	SubscriptionID string
	GoodwillID     int64
}

func (q *Queries) FindItemInSubscription(ctx context.Context, arg FindItemInSubscriptionParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, findItemInSubscription, arg.SubscriptionID, arg.GoodwillID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.GoodwillID,
		&i.CreatedAt,
		&i.StartedAt,
		&i.EndsAt,
		&i.SentFinal,
	)
	return i, err
}

const findItemsEndingSoon = `-- name: FindItemsEndingSoon :many
SELECT id, subscription_id, goodwill_id, created_at, started_at, ends_at, sent_final FROM items
WHERE ends_at < datetime('now', '+5 minutes') AND sent_final = FALSE
LIMIT 100
`

func (q *Queries) FindItemsEndingSoon(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, findItemsEndingSoon)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.GoodwillID,
			&i.CreatedAt,
			&i.StartedAt,
			&i.EndsAt,
			&i.SentFinal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setItemSentFinal = `-- name: SetItemSentFinal :exec
UPDATE items
SET sent_final = TRUE
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) SetItemSentFinal(ctx context.Context, ids []string) error {
	query := setItemSentFinal
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}
