// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package sqlgen

import (
	"context"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (id, subscription_id, goodwill_id, created_at, auction_end_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?)
RETURNING id, subscription_id, goodwill_id, created_at, auction_end_at
`

type CreateItemParams struct {
	ID             string
	SubscriptionID string
	GoodwillID     int64
	AuctionEndAt   time.Time
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.SubscriptionID,
		arg.GoodwillID,
		arg.AuctionEndAt,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.GoodwillID,
		&i.CreatedAt,
		&i.AuctionEndAt,
	)
	return i, err
}

const findItemInSubscription = `-- name: FindItemInSubscription :one
SELECT id, subscription_id, goodwill_id, created_at, auction_end_at FROM items
WHERE subscription_id = ? AND goodwill_id = ?
`

type FindItemInSubscriptionParams struct {
	SubscriptionID string
	GoodwillID     int64
}

func (q *Queries) FindItemInSubscription(ctx context.Context, arg FindItemInSubscriptionParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, findItemInSubscription, arg.SubscriptionID, arg.GoodwillID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.GoodwillID,
		&i.CreatedAt,
		&i.AuctionEndAt,
	)
	return i, err
}

const findItemsEndingSoon = `-- name: FindItemsEndingSoon :many
SELECT id, subscription_id, goodwill_id, created_at, auction_end_at FROM items
WHERE auction_end_at < ?
`

func (q *Queries) FindItemsEndingSoon(ctx context.Context, auctionEndAt time.Time) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, findItemsEndingSoon, auctionEndAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.GoodwillID,
			&i.CreatedAt,
			&i.AuctionEndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
