// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.sql

package sqlgen

import (
	"context"
	"strings"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (id, user_id, term, last_notified_at, min_price, max_price, notify_minutes)
VALUES (?, ?, ?, 0, ?, ?, ?)
RETURNING id, user_id, term, min_price, max_price, category_id, last_notified_at, notify_minutes
`

type CreateSubscriptionParams struct {
	ID            string
	UserID        string
	Term          string
	MinPrice      *int64
	MaxPrice      *int64
	NotifyMinutes int64
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.ID,
		arg.UserID,
		arg.Term,
		arg.MinPrice,
		arg.MaxPrice,
		arg.NotifyMinutes,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Term,
		&i.MinPrice,
		&i.MaxPrice,
		&i.CategoryID,
		&i.LastNotifiedAt,
		&i.NotifyMinutes,
	)
	return i, err
}

const deleteUserSubscriptions = `-- name: DeleteUserSubscriptions :exec
DELETE FROM subscriptions
WHERE user_id = ? AND id IN (/*SLICE:ids*/?)
`

type DeleteUserSubscriptionsParams struct {
	UserID string
	Ids    []string
}

func (q *Queries) DeleteUserSubscriptions(ctx context.Context, arg DeleteUserSubscriptionsParams) error {
	query := deleteUserSubscriptions
	var queryParams []interface{}
	queryParams = append(queryParams, arg.UserID)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const findSubscription = `-- name: FindSubscription :one
SELECT id, user_id, term, min_price, max_price, category_id, last_notified_at, notify_minutes FROM subscriptions
WHERE id = ?
`

func (q *Queries) FindSubscription(ctx context.Context, id string) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, findSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Term,
		&i.MinPrice,
		&i.MaxPrice,
		&i.CategoryID,
		&i.LastNotifiedAt,
		&i.NotifyMinutes,
	)
	return i, err
}

const findSubscriptionsToNotify = `-- name: FindSubscriptionsToNotify :many
SELECT id, user_id, term, min_price, max_price, category_id, last_notified_at, notify_minutes FROM subscriptions
WHERE last_notified_at < datetime('now', '-5 minutes')
LIMIT 100
`

func (q *Queries) FindSubscriptionsToNotify(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, findSubscriptionsToNotify)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Term,
			&i.MinPrice,
			&i.MaxPrice,
			&i.CategoryID,
			&i.LastNotifiedAt,
			&i.NotifyMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserSubscriptions = `-- name: FindUserSubscriptions :many
SELECT id, user_id, term, min_price, max_price, category_id, last_notified_at, notify_minutes FROM subscriptions
WHERE user_id = ?
`

func (q *Queries) FindUserSubscriptions(ctx context.Context, userID string) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, findUserSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Term,
			&i.MinPrice,
			&i.MaxPrice,
			&i.CategoryID,
			&i.LastNotifiedAt,
			&i.NotifyMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSubscriptionLastNotifiedAt = `-- name: SetSubscriptionLastNotifiedAt :exec
UPDATE subscriptions
SET last_notified_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) SetSubscriptionLastNotifiedAt(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, setSubscriptionLastNotifiedAt, id)
	return err
}
